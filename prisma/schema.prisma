// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamspaceId String
  columns Column[]
  color String
  imageThumbUrl String @default("")
  imageFullUrl String @default("")
  
  @@index([teamspaceId])
}

model Column {
  id String @id @default(cuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId String
  board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  position Int
  tasks Task[]

  @@index([boardId])
  @@unique([id, boardId])
}

model Task {
  id        String   @id @default(cuid())
  title     String
  dueDate   DateTime?
  reminder  Boolean  @default(false)
  repeat    String? // 'daily', 'weekly', 'monthly'
  status    String   @default("in-progress") // 'in-progress', 'completed', 'cancelled'
  category  String?
  userId    String?
  teamspaceId String?   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  columnId  String?
  column    Column?  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  position  Int?     
  description String? @default("")
  content TaskContent[]
  assignedTo String[]

  @@index([userId])
  @@index([teamspaceId])
  @@index([columnId])
}

model Content {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  teamspaceId String?
  categories ContentCategory[]
  tasks TaskContent[]

  @@index([userId])
  @@index([teamspaceId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  teamspaceId String?
  contents  ContentCategory[]

  @@index([userId])
  @@index([teamspaceId])
  @@unique([name, teamspaceId])
  @@unique([name, userId])
}

model TaskContent {
  task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  content    Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId  String
  assignedAt DateTime  @default(now())

  @@id([taskId, contentId])
  @@index([taskId])
  @@index([contentId])
}

model ContentCategory {
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  assignedAt  DateTime  @default(now())

  @@id([contentId, categoryId])
  @@index([contentId])
  @@index([categoryId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  COLUMN
  TASK
  CONTENT
}

model AuditLog {
  id        String     @id @default(uuid())
  entityId  String
  entityType ENTITY_TYPE
  entityTitle String
  action    ACTION
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String?
  userImage String?
  userName  String?

  @@index([userId])
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  @@index([userId])
}